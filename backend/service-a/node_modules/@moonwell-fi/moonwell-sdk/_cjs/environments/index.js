"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.publicEnvironments = exports.createEnvironment = exports.supportedChainsIds = exports.supportedChains = exports.polygon = exports.optimism = exports.moonriver = exports.moonbeam = exports.GovernanceTokensConfig = exports.ethereum = exports.base = exports.avalanche = exports.arbitrum = void 0;
const governance_js_1 = require("./definitions/governance.js");
Object.defineProperty(exports, "GovernanceTokensConfig", { enumerable: true, get: function () { return governance_js_1.GovernanceTokensConfig; } });
const environment_js_1 = require("./definitions/base/environment.js");
Object.defineProperty(exports, "base", { enumerable: true, get: function () { return environment_js_1.base; } });
const environment_js_2 = require("./definitions/moonbeam/environment.js");
const environment_js_3 = require("./definitions/moonriver/environment.js");
const environment_js_4 = require("./definitions/optimism/environment.js");
const environment_js_5 = require("./definitions/ethereum/environment.js");
Object.defineProperty(exports, "ethereum", { enumerable: true, get: function () { return environment_js_5.ethereum; } });
const environment_js_6 = require("./definitions/avalanche/environment.js");
Object.defineProperty(exports, "avalanche", { enumerable: true, get: function () { return environment_js_6.avalanche; } });
const environment_js_7 = require("./definitions/arbitrum/environment.js");
Object.defineProperty(exports, "arbitrum", { enumerable: true, get: function () { return environment_js_7.arbitrum; } });
const environment_js_8 = require("./definitions/polygon/environment.js");
Object.defineProperty(exports, "polygon", { enumerable: true, get: function () { return environment_js_8.polygon; } });
const chains_1 = require("viem/chains");
Object.defineProperty(exports, "moonbeam", { enumerable: true, get: function () { return chains_1.moonbeam; } });
Object.defineProperty(exports, "moonriver", { enumerable: true, get: function () { return chains_1.moonriver; } });
Object.defineProperty(exports, "optimism", { enumerable: true, get: function () { return chains_1.optimism; } });
const supportedChainsIds = {
    [environment_js_1.base.id]: "base",
    [chains_1.optimism.id]: "optimism",
    [chains_1.moonriver.id]: "moonriver",
    [chains_1.moonbeam.id]: "moonbeam",
    [environment_js_5.ethereum.id]: "ethereum",
    [environment_js_6.avalanche.id]: "avalanche",
    [environment_js_7.arbitrum.id]: "arbitrum",
    [environment_js_8.polygon.id]: "polygon",
};
exports.supportedChainsIds = supportedChainsIds;
const supportedChains = {
    base: environment_js_1.base,
    optimism: chains_1.optimism,
    moonriver: chains_1.moonriver,
    moonbeam: chains_1.moonbeam,
    ethereum: environment_js_5.ethereum,
    avalanche: environment_js_6.avalanche,
    arbitrum: environment_js_7.arbitrum,
    polygon: environment_js_8.polygon,
};
exports.supportedChains = supportedChains;
const createEnvironment = (config) => {
    switch (config.chain.id) {
        case environment_js_1.base.id:
            return (0, environment_js_1.createEnvironment)(config.rpcUrls, config.indexerUrl);
        case chains_1.moonbeam.id:
            return (0, environment_js_2.createEnvironment)(config.rpcUrls, config.indexerUrl);
        case chains_1.moonriver.id:
            return (0, environment_js_3.createEnvironment)(config.rpcUrls, config.indexerUrl);
        case chains_1.optimism.id:
            return (0, environment_js_4.createEnvironment)(config.rpcUrls, config.indexerUrl);
        case environment_js_5.ethereum.id:
            return (0, environment_js_5.createEnvironment)(config.rpcUrls, config.indexerUrl);
        case environment_js_6.avalanche.id:
            return (0, environment_js_6.createEnvironment)(config.rpcUrls, config.indexerUrl);
        case environment_js_7.arbitrum.id:
            return (0, environment_js_7.createEnvironment)(config.rpcUrls, config.indexerUrl);
        case environment_js_8.polygon.id:
            return (0, environment_js_8.createEnvironment)(config.rpcUrls, config.indexerUrl);
        default:
            throw new Error("Unsupported chainId");
    }
};
exports.createEnvironment = createEnvironment;
exports.publicEnvironments = {
    base: (0, environment_js_1.createEnvironment)(),
    moonbeam: (0, environment_js_2.createEnvironment)(),
    moonriver: (0, environment_js_3.createEnvironment)(),
    optimism: (0, environment_js_4.createEnvironment)(),
    ethereum: (0, environment_js_5.createEnvironment)(),
    avalanche: (0, environment_js_6.createEnvironment)(),
    arbitrum: (0, environment_js_7.createEnvironment)(),
    polygon: (0, environment_js_8.createEnvironment)(),
};
//# sourceMappingURL=index.js.map