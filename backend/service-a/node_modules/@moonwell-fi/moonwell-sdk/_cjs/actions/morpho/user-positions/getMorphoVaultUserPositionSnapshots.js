"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMorphoVaultUserPositionSnapshots = void 0;
const axios_1 = __importDefault(require("axios"));
const dayjs_1 = __importDefault(require("dayjs"));
const utc_js_1 = __importDefault(require("dayjs/plugin/utc.js"));
const index_js_1 = require("../../../common/index.js");
dayjs_1.default.extend(utc_js_1.default);
async function getMorphoVaultUserPositionSnapshots(client, args) {
    const environment = (0, index_js_1.getEnvironmentFromArgs)(client, args);
    if (!environment) {
        return [];
    }
    let { vaultAddress, vault } = args;
    if (!vaultAddress) {
        vaultAddress = environment.vaults[vault].address;
    }
    return fetchUserPositionSnapshots(args.userAddress, vaultAddress, environment);
}
exports.getMorphoVaultUserPositionSnapshots = getMorphoVaultUserPositionSnapshots;
async function fetchUserPositionSnapshots(userAddress, vaultAddress, environment) {
    const dailyData = [];
    let hasNextPage = true;
    let endCursor;
    while (hasNextPage) {
        const result = await axios_1.default.post(environment.indexerUrl, {
            query: `
          query {
            accountVaultDailySnapshots(
              limit: 365,
              orderDirection: "desc",
              orderBy: "timestamp",
              where: { vaultAddress: "${vaultAddress.toLowerCase()}", accountAddress: "${userAddress.toLowerCase()}", chainId: ${environment.chainId} }
              ${endCursor ? `after: "${endCursor}"` : ""}
            ) {
              items {
                totalSuppliesUSD
                timestamp
              }
              pageInfo {
                hasNextPage
                endCursor
              }
            }
          }
        `,
        });
        dailyData.push(...result.data.data.accountVaultDailySnapshots.items.filter((f) => (0, index_js_1.isStartOfDay)(f.timestamp)));
        hasNextPage =
            result.data.data.accountVaultDailySnapshots.pageInfo.hasNextPage;
        endCursor = result.data.data.accountVaultDailySnapshots.pageInfo.endCursor;
    }
    if (dailyData.length > 0) {
        return dailyData.map((point) => {
            const suppliedUsd = Number(point.totalSuppliesUSD);
            const result = {
                chainId: environment.chainId,
                timestamp: point.timestamp * 1000,
                suppliedUsd: suppliedUsd,
                account: userAddress,
                vaultAddress: vaultAddress,
            };
            return result;
        });
    }
    else {
        return [];
    }
}
//# sourceMappingURL=getMorphoVaultUserPositionSnapshots.js.map