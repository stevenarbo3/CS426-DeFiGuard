import lodash from "lodash";
const { uniq } = lodash;
import { Amount } from "../../../common/amount.js";
import { getGraphQL } from "../utils/graphql.js";
export async function getUserMorphoRewardsData(params) {
    if (params.environment.custom.morpho?.minimalDeployment === false) {
        const rewards = await getMorphoRewardsData(params.environment.chainId, params.account);
        const assets = await getMorphoAssetsData(rewards.map((r) => r.asset.address));
        const result = rewards.map((r) => {
            const asset = assets.find((a) => a.address.toLowerCase() === r.asset.address.toLowerCase());
            if (!asset) {
                return undefined;
            }
            const rewardToken = {
                address: asset.address,
                decimals: asset.decimals,
                symbol: asset.symbol,
                name: asset.name,
            };
            switch (r.type) {
                case "uniform-reward": {
                    const claimableNow = new Amount(BigInt(r.amount?.claimable_now || 0), rewardToken.decimals);
                    const claimableNowUsd = claimableNow.value * (asset.priceUsd || 0);
                    const claimableFuture = new Amount(BigInt(r.amount?.claimable_next || 0), rewardToken.decimals);
                    const claimableFutureUsd = claimableFuture.value * (asset.priceUsd || 0);
                    const uniformReward = {
                        type: "uniform-reward",
                        chainId: r.asset.chain_id,
                        account: r.user,
                        rewardToken,
                        claimableNow,
                        claimableNowUsd,
                        claimableFuture,
                        claimableFutureUsd,
                    };
                    return uniformReward;
                }
                case "market-reward": {
                    const claimableNow = new Amount(BigInt(r.for_supply?.claimable_now || 0), rewardToken.decimals);
                    const claimableNowUsd = claimableNow.value * (asset.priceUsd || 0);
                    const claimableFuture = new Amount(BigInt(r.for_supply?.claimable_next || 0), rewardToken.decimals);
                    const claimableFutureUsd = claimableFuture.value * (asset.priceUsd || 0);
                    const collateralClaimableNow = new Amount(BigInt(r.for_collateral?.claimable_now || 0), rewardToken.decimals);
                    const collateralClaimableNowUsd = collateralClaimableNow.value * (asset.priceUsd || 0);
                    const collateralClaimableFuture = new Amount(BigInt(r.for_collateral?.claimable_next || 0), rewardToken.decimals);
                    const collateralClaimableFutureUsd = collateralClaimableFuture.value * (asset.priceUsd || 0);
                    const borrowClaimableNow = new Amount(BigInt(r.for_borrow?.claimable_now || 0), rewardToken.decimals);
                    const borrowClaimableNowUsd = borrowClaimableNow.value * (asset.priceUsd || 0);
                    const borrowClaimableFuture = new Amount(BigInt(r.for_borrow?.claimable_next || 0), rewardToken.decimals);
                    const borrowClaimableFutureUsd = borrowClaimableFuture.value * (asset.priceUsd || 0);
                    //Rewards reallocated to vaults are reported as vault rewards
                    if (r.reallocated_from) {
                        const vaultReward = {
                            type: "vault-reward",
                            chainId: r.program.chain_id,
                            account: r.user,
                            vaultId: r.reallocated_from,
                            rewardToken,
                            claimableNow,
                            claimableNowUsd,
                            claimableFuture,
                            claimableFutureUsd,
                        };
                        return vaultReward;
                    }
                    else {
                        const marketReward = {
                            type: "market-reward",
                            chainId: r.program.chain_id,
                            account: r.user,
                            marketId: r.program.market_id || "",
                            rewardToken,
                            collateralRewards: {
                                claimableNow: collateralClaimableNow,
                                claimableNowUsd: collateralClaimableNowUsd,
                                claimableFuture: collateralClaimableFuture,
                                claimableFutureUsd: collateralClaimableFutureUsd,
                            },
                            borrowRewards: {
                                claimableNow: borrowClaimableNow,
                                claimableNowUsd: borrowClaimableNowUsd,
                                claimableFuture: borrowClaimableFuture,
                                claimableFutureUsd: borrowClaimableFutureUsd,
                            },
                        };
                        return marketReward;
                    }
                }
                case "vault-reward": {
                    const claimableNow = new Amount(BigInt(r.for_supply?.claimable_now || 0), rewardToken.decimals);
                    const claimableNowUsd = claimableNow.value * (asset.priceUsd || 0);
                    const claimableFuture = new Amount(BigInt(r.for_supply?.claimable_next || 0), rewardToken.decimals);
                    const claimableFutureUsd = claimableFuture.value * (asset.priceUsd || 0);
                    const vaultReward = {
                        type: "vault-reward",
                        chainId: r.program.chain_id,
                        account: r.user,
                        vaultId: r.program.vault,
                        rewardToken,
                        claimableNow,
                        claimableNowUsd,
                        claimableFuture,
                        claimableFutureUsd,
                    };
                    return vaultReward;
                }
            }
        });
        return result.filter((r) => r !== undefined);
    }
    return [];
}
async function getMorphoRewardsData(chainId, account) {
    const rewardsRequest = await fetch(`https://rewards.morpho.org/v1/users/${account}/rewards?chain_id=${chainId}`);
    const rewards = await rewardsRequest.json();
    return (rewards.data || []);
}
async function getMorphoAssetsData(addresses) {
    const rewardsRequest = await getGraphQL(`
    query {
      assets(where: { address_in:[${uniq(addresses)
        .map((a) => `"${a.toLowerCase()}"`)
        .join(",")}]}) {
        items {
          address     
          symbol
          priceUsd
          name
          decimals
        }
      }
    }
  `);
    if (rewardsRequest) {
        return rewardsRequest.assets.items;
    }
    return [];
}
//# sourceMappingURL=common.js.map