import axios from "axios";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc.js";
import { getEnvironmentFromArgs, isStartOfDay } from "../../../common/index.js";
dayjs.extend(utc);
export async function getMorphoVaultSnapshots(client, args) {
    const environment = getEnvironmentFromArgs(client, args);
    if (!environment) {
        return [];
    }
    return fetchVaultSnapshots(args
        .vaultAddress, environment);
}
async function fetchVaultSnapshots(vaultAddress, environment) {
    const dailyData = [];
    let hasNextPage = true;
    let endCursor;
    while (hasNextPage) {
        const result = await axios.post(environment.indexerUrl, {
            query: `
          query {
            vaultDailySnapshots (        
              limit: 365,
              orderBy: "timestamp"
              orderDirection: "desc"
              where: {vaultAddress: "${vaultAddress.toLowerCase()}", chainId: ${environment.chainId}}
              ${endCursor ? `after: "${endCursor}"` : ""}
            ) {
              items {
                  totalBorrows
                  totalBorrowsUSD
                  totalSupplies
                  totalSuppliesUSD
                  totalLiquidity
                  totalLiquidityUSD
                  timestamp
              }
              pageInfo {
                hasNextPage
                endCursor
              }
            }
          }
        `,
        });
        dailyData.push(...result.data.data.vaultDailySnapshots.items.filter((f) => isStartOfDay(f.timestamp)));
        hasNextPage = result.data.data.vaultDailySnapshots.pageInfo.hasNextPage;
        endCursor = result.data.data.vaultDailySnapshots.pageInfo.endCursor;
    }
    if (dailyData.length > 0) {
        return dailyData.map((point) => {
            const supplied = Number(point.totalSupplies);
            const borrow = Number(point.totalBorrows);
            const borrowUsd = Number(point.totalBorrowsUSD);
            const suppliedUsd = Number(point.totalSuppliesUSD);
            const liquidity = Number(point.totalLiquidity);
            const liquidityUsd = Number(point.totalLiquidityUSD);
            const result = {
                vaultAddress: vaultAddress.toLowerCase(),
                chainId: environment.chainId,
                timestamp: point.timestamp * 1000,
                totalSupply: supplied,
                totalSupplyUsd: suppliedUsd,
                totalBorrows: borrow,
                totalBorrowsUsd: borrowUsd,
                totalLiquidity: liquidity,
                totalLiquidityUsd: liquidityUsd,
            };
            return result;
        });
    }
    else {
        return [];
    }
}
//# sourceMappingURL=getMorphoVaultSnapshots.js.map