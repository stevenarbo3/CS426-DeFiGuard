import axios from "axios";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc.js";
import { getEnvironmentFromArgs, isStartOfDay } from "../../../common/index.js";
dayjs.extend(utc);
export async function getMorphoVaultUserPositionSnapshots(client, args) {
    const environment = getEnvironmentFromArgs(client, args);
    if (!environment) {
        return [];
    }
    let { vaultAddress, vault } = args;
    if (!vaultAddress) {
        vaultAddress = environment.vaults[vault].address;
    }
    return fetchUserPositionSnapshots(args.userAddress, vaultAddress, environment);
}
async function fetchUserPositionSnapshots(userAddress, vaultAddress, environment) {
    const dailyData = [];
    let hasNextPage = true;
    let endCursor;
    while (hasNextPage) {
        const result = await axios.post(environment.indexerUrl, {
            query: `
          query {
            accountVaultDailySnapshots(
              limit: 365,
              orderDirection: "desc",
              orderBy: "timestamp",
              where: { vaultAddress: "${vaultAddress.toLowerCase()}", accountAddress: "${userAddress.toLowerCase()}", chainId: ${environment.chainId} }
              ${endCursor ? `after: "${endCursor}"` : ""}
            ) {
              items {
                totalSuppliesUSD
                timestamp
              }
              pageInfo {
                hasNextPage
                endCursor
              }
            }
          }
        `,
        });
        dailyData.push(...result.data.data.accountVaultDailySnapshots.items.filter((f) => isStartOfDay(f.timestamp)));
        hasNextPage =
            result.data.data.accountVaultDailySnapshots.pageInfo.hasNextPage;
        endCursor = result.data.data.accountVaultDailySnapshots.pageInfo.endCursor;
    }
    if (dailyData.length > 0) {
        return dailyData.map((point) => {
            const suppliedUsd = Number(point.totalSuppliesUSD);
            const result = {
                chainId: environment.chainId,
                timestamp: point.timestamp * 1000,
                suppliedUsd: suppliedUsd,
                account: userAddress,
                vaultAddress: vaultAddress,
            };
            return result;
        });
    }
    else {
        return [];
    }
}
//# sourceMappingURL=getMorphoVaultUserPositionSnapshots.js.map