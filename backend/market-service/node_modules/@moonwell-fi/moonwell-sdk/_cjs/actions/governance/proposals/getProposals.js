"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProposals = void 0;
const index_js_1 = require("../../../common/index.js");
const index_js_2 = require("../../../environments/index.js");
const logger = __importStar(require("../../../logger/console.js"));
const common_js_1 = require("./common.js");
async function getProposals(client, args) {
    const environments = (0, index_js_1.getEnvironmentsFromArgs)(client, args);
    const governanceEnvironments = environments.filter((environment) => environment.chainId === index_js_2.moonriver.id ||
        environment.chainId === index_js_2.moonbeam.id);
    const logId = logger.start("getProposals", "Starting to get proposals...");
    const environmentProposals = await Promise.all(governanceEnvironments
        .filter((environment) => environment.chainId === index_js_2.moonriver.id ||
        environment.chainId === index_js_2.moonbeam.id)
        .map((environment) => Promise.all([
        (0, common_js_1.getProposalData)({ environment }),
        (0, common_js_1.getCrossChainProposalData)({ environment }),
        (0, common_js_1.getExtendedProposalData)({ environment }),
    ])));
    logger.end(logId);
    const proposals = governanceEnvironments.flatMap((_item, index) => {
        const [_proposals, _xcProposals, _extendedDatas] = environmentProposals[index];
        const proposals = [..._proposals, ..._xcProposals];
        (0, common_js_1.appendProposalExtendedData)(proposals, _extendedDatas);
        return proposals;
    });
    return proposals;
}
exports.getProposals = getProposals;
//# sourceMappingURL=getProposals.js.map