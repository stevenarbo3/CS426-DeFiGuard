"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMarkets = void 0;
const index_js_1 = require("../../../common/index.js");
const logger = __importStar(require("../../../logger/console.js"));
const common_js_1 = require("./common.js");
async function getMarkets(client, args) {
    const environments = (0, index_js_1.getEnvironmentsFromArgs)(client, args);
    const logId = logger.start("getMarkets", "Starting to get markets...");
    const result = await Promise.all(environments.map((environment) => (0, common_js_1.getMarketsData)(environment)));
    if (args?.includeLiquidStakingRewards === true) {
        const liquidStakingRewards = await (0, common_js_1.fetchLiquidStakingRewards)();
        for (const item of result.flat()) {
            if (item.underlyingToken.symbol.toLowerCase() === "cbeth") {
                item.rewards.push({
                    token: item.underlyingToken,
                    supplyApr: 0,
                    borrowApr: 0,
                    liquidStakingApr: liquidStakingRewards.cbETH,
                });
            }
            if (item.underlyingToken.symbol.toLowerCase() === "reth") {
                item.rewards.push({
                    token: item.underlyingToken,
                    supplyApr: 0,
                    borrowApr: 0,
                    liquidStakingApr: liquidStakingRewards.rETH,
                });
            }
            if (item.underlyingToken.symbol.toLowerCase() === "wsteth") {
                item.rewards.push({
                    token: item.underlyingToken,
                    supplyApr: 0,
                    borrowApr: 0,
                    liquidStakingApr: liquidStakingRewards.wstETH,
                });
            }
            item.totalSupplyApr =
                item.baseSupplyApy +
                    item.rewards.reduce((acc, reward) => acc + reward.supplyApr + reward.liquidStakingApr, 0);
        }
    }
    logger.end(logId);
    return result.flat();
}
exports.getMarkets = getMarkets;
//# sourceMappingURL=getMarkets.js.map